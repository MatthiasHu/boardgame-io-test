.board_table {
  background-color: lightgray;
  border-collapse: collapse;
  box-shadow: 0em 0em 0.25em black;
  /* Make sure this element establishes a stacking context. */
  position: relative;
  z-index: 1;
}

.board_table[player_is_active="true"] {
  box-shadow: 0em 0em 0.5em green;
}

td {
  padding: 0em;
  /* Setting width/height in a <td> does not seem to work well if the table */
  /* overflows, so we use a separate .board_point <div>. */
}

.board_point {
  width: 2em;
  height: 2em;
  position: relative;
}

/* Center a single child in the nearest positioned ancestor. */
.centering {
  position: absolute;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}
/* Don't squeeze the centered child if it is wider than the parent. */
.centering > * {
  flex-shrink: 0;
}

.empty_point {
  width: 0.25em;
  height: 0.25em;
  background-color: black;
  border-radius: 50%;
}

.stone {
  width: 2em;
  height: 2em;
  border-radius: 50%;
  /* Stone should be positioned, so that the shadow is positioned relative to it. */
  /* (Somehow it also works without this...?) */
  position: relative;
  /* We can not set a z-index here, that would establish a new stacking context. */
}
.stone::before {
  content: "";
  display: block;
  /* Negative z-index so the shadow is below nearby stones. */
  position: absolute;
  z-index: -1;
  width: 2em;
  height: 2em;
  border-radius: 50%;
  box-shadow: 0em 0em 0.5em #0008;
}

.stone_Black {
  background-color: black;
}
.stone_White {
  background-color: white;
}

.last_play_of_Black ,
.last_play_of_White {
  width: 0.5em;
  height: 0.5em;
  border-radius: 50%;
  border: 0.1em solid #888;
}
